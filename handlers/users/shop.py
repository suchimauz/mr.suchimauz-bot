from typing import Union

from keyboards.inline.shop import product_categories_keyboard, products_keyboard, product_cd, \
    products_item_keyboard
from utils.db.models.bank_account import get_ba_count_by_product

from utils.db.models.product import get_product_by_type
from aiogram.types import Message, CallbackQuery
from loader import dp


async def list_product_categories(message: Union[Message, CallbackQuery], **kwargs):
    markup = await product_categories_keyboard()
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞"

    if isinstance(message, Message):
        await message.answer(text=text, reply_markup=markup)

    elif isinstance(message, CallbackQuery):
        call = message
        await call.message.edit_text(text=text, reply_markup=markup)


async def list_products(callback: CallbackQuery, category, **kwargs):
    if category == 'logs':
        text = f"<b>–õ–æ–≥–∏:</b>\n\n" \
                f"üü¢ <b>Google:</b>\n" \
                f"üî• No ADS MIX | üí∞ <b>0.9$</b> <i>(–æ—Ç 100 —à—Ç –ø–æ 0.8$)</i>\n" \
                f"üî• No ADS EU | üí∞ <b>1.5$</b> <i>(–æ—Ç 100 —à—Ç –ø–æ 1.3$)</i>\n" \
                f"üî• No ADS USA | üí∞ <b>2$</b> <i>(–æ—Ç 100 —à—Ç –ø–æ 1.8$)</i>\n" \
                f"üî• Gpay+cc EU TOP | üí∞ <b>3.7$</b> <i>(–æ—Ç 50 —à—Ç –ø–æ 3.5$)</i>\n" \
                f"üî• Gpay+cc USA | üí∞ <b>4.5$</b>\n" \
                f"üî• Gpay+cc MIX | üí∞ <b>2.2$</b> <i>(–æ—Ç 100 —à—Ç –ø–æ 2.0$)</i>\n\n" \
                f"üîµ <b>Facebook:</b>\n" \
                f"üî• MIX | üí∞ <b>2.0$</b> <i>(–æ—Ç 100 —à—Ç –ø–æ 1.8$)</i>\n" \
                f"üî• MIX –ª–∏–º–∏—Ç 250-350$ | üí∞ <b>7.0$</b>\n" \
                f"üî• FB+BM MIX | üí∞ <b>3.0$</b> <i>(–æ—Ç 100 —à—Ç –ø–æ 2.9$)</i>\n\n" \
                f"–ó–∞ –ø–æ–∫—É–ø–∫–æ–π –æ–±—Ä–∞—â–∞—Ç—å—Å—è @logs_suchimauz\n" \
                f"‚ùóÔ∏è–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–µ—Ç. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ - <b>10$</b>"

        await callback.message.answer(text=text)
    else:
        markup = await products_keyboard(category=category, user_id=callback.from_user.id)

        await callback.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä", reply_markup=markup)


async def show_product(callback: CallbackQuery, category, product_type, **kwargs):
    markup = await products_item_keyboard(category=category, product_type=product_type)

    product = await get_product_by_type(product_type=product_type)

    product_count = 0

    if product.type == "schwab":
        product_count = await get_ba_count_by_product(product.type)

    price_text = await product.get_price_text(user_id=callback.from_user.id)

    text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ: \n\n" \
           f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{product.name}</b>\n" \
           f"–¶–µ–Ω–∞: <i><b>{price_text}</b></i>\n" \
           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <i><b>{product_count}</b></i>"

    if product.type == "schwab":
        text = text + f"\n\n–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ–±—ã—á–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏!\n" \
                      f"<b><i>–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø–æ–∫—É–ø–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ –ë–ê, —Å–∫–æ–ª—å–∫–æ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∑–∞ 8 —á–∞—Å–æ–≤, –¥–∞–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.</i></b>\n" \
                      f"<b>–í–ê–ñ–ù–û!</b> " \
                      f"<i>–ï—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö, —Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –ø—Ä–∏–¥–µ—Ç –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤—Ç–æ—Ä–Ω–∏–∫!</i>"

    await callback.message.edit_text(text=text,
                                     reply_markup=markup)


@dp.callback_query_handler(product_cd.filter())
async def navigate(call: CallbackQuery, callback_data: dict):
    CURRENT_LEVEL = callback_data.get('level')
    category = callback_data.get('category')
    product_type = callback_data.get('product_type')

    levels = {
        "0": list_product_categories,
        "1": list_products,
        "2": show_product,
    }
    current_level_function = levels[CURRENT_LEVEL]

    await current_level_function(call,
                                 category=category,
                                 product_type=product_type)